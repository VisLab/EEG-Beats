function defaults = getBeatDefaults()
% Returns the default settings for EEG-Beats
%
% Parameters:
%     signal       (optional) a structure compatible with EEGLAB EEG structure
%                   (must have .data, .srate, .filepath, and filename fields
% Output:
%     defaults     a structure with the parameters for the default types
%                  in the form of a structure that has fields
%                     value: default value
%                     classes:   classes that the parameter belongs to
%                     attributes:  attributes of the parameter
%                     description: description of parameter
%
% BLINKER extracts blinks and ocular indices from time series. 
% Copyright (C) 2020  UTSA
% 
% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <http://www.gnu.org/licenses/>.

    defaults = struct( ...
        'ekgChannelLabel', ...
         getRules('ekg', {'char'}, {}, ...
        'Label of the EEG channel containing the EKG signal.'), ...
        'filterHz', ...
        getRules([3, 20], {'numeric'}, {'positive', 'row', 'size', [1, 2]}, ...
        'Frequency band to filter raw signal before detecting heartbeats.'), ...
        'srate', ...
        getRules(128, {'numeric'}, {'scalar', 'positive'}, ...
        'Frequency to resample raw ekg signal at before filtering'), ...
        'truncateThreshold', ...
        getRules(15, {'numeric'}, {'positive', 'scalar'}, ...
        'Number of robust stds away from median to truncate ekg before detecting heartbeats.'), ...
        'ibiMaxSeconds', ...
        getRules(1.5, {'numeric'}, {'positive', 'scalar'}, ...
        'Maximum number of seconds between peaks for valid IBIs.'), ...
        'ibiMinSeconds', ...
        getRules(0.5, {'numeric'}, {'positive', 'scalar'}, ...
        'Minimum number of seconds between peaks for valid IBIs.'), ...
        'threshold', ...
        getRules(1.5, {'numeric'}, {'positive', 'scalar'}, ...
        'Minimum heartbeat amplitude in units of robust stds away from median signal.'), ...
        'qrsDuration', ...
        getRules(0.1, {'numeric'}, {'positive', 'scalar'}, ...
        'Maximum width of a heartbeat peak in seconds.'), ...
        'flipIntervalSeconds', ...
        getRules(2, {'numeric'}, {'positive', 'scalar'}, ...
        'Length of subintervals in partition of signal to determine dominant heartbeat direction.'), ...
        'consensusIntervals', ...
        getRules(31, {'numeric'}, {'positive', 'scalar', 'integer'}, ...
        'Number of intervals to partition the signal to determine initial fenceposts.'), ...
        'doPlot', ...
        getRules(true, {'logical'}, {}, ...
        'If true, produce a plot of EKG signal with heartbeats marked.'), ...
        'figureVisibility', ...
        getRules('on', {'char'}, {}, ...
        'If true, produce a plot of EKG signal with heartbeats marked.'), ...
        'ekgFile', ...
        getRules('', {'char'}, {}, ...
        'If non-empty, file name with path in which to store the peak information for the dataset.'), ...
        'plotFile', ...
        getRules('', {'char'}, {}, ...
        'If non-empty and doPlot is true, file in which to save .fig file.'), ...
        'savePng', ...
         getRules(true, {'logical'}, {}, ...
        'If plotFile is not empty and doPlot is true, will save a .png file as well.'), ...
        'verbose', ...
        getRules(true, {'logical'}, {}, ...
        'If true, output intermediate algorithm information.'), ...
        'IBIBlockSize', ...
         getRules(5, {'numeric'}, {'positive', 'scalar'}, ...
        'Block size in minutes for computing IBI indicators.') ...
     );
end

function s = getRules(value, classes, attributes, description)
% Construct the default structure
s = struct('value', [], 'classes', [], ...
    'attributes', [], 'description', []);
s.value = value;
s.classes = classes;
s.attributes = attributes;
s.description = description;
end